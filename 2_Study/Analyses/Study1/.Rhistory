lapply(function(df) mutate(df,subj_idx = as.numeric(jsonlite::fromJSON(response[4])$subj_idx),
Born = jsonlite::fromJSON(response[5])$Born,
year = jsonlite::fromJSON(response[6])$sex,
education = jsonlite::fromJSON(response[7])$education))%>%
bind_rows()
list.files(file.path("../Data"), pattern = "color_test_.*\\.csv$") %>%
# 对读取到的所有.out文件x都执行函数read.table
lapply(function(x) read.csv(file.path("../Data", x), header = TRUE)) %>%
# 读取被试人口学信息
lapply(function(df) mutate(df,subj_idx = as.numeric(jsonlite::fromJSON(response[4])$subj_idx),
Born = jsonlite::fromJSON(response[5])$Born,
year = jsonlite::fromJSON(response[6])$sex,
education = jsonlite::fromJSON(response[7])$education))
list.files(file.path("../Data"), pattern = "color_test_.*\\.csv$") %>%
# 对读取到的所有.out文件x都执行函数read.table
lapply(function(x) read.csv(file.path("../Data", x), header = TRUE)) %>%
# 读取被试人口学信息
lapply(function(df) mutate(df,subj_idx = as.numeric(jsonlite::fromJSON(response[4])$subj_idx),
Born = jsonlite::fromJSON(response[5])$Born,
year = jsonlite::fromJSON(response[6])$sex,
education = jsonlite::fromJSON(response[7])$education))%>%
bind_rows()
df_raw <- list.files(file.path("../Data"), pattern = "color_test_.*\\.csv$") %>%
# 对读取到的所有.out文件x都执行函数read.table
lapply(function(x) read.csv(file.path("../Data", x), header = TRUE)) %>%
# 读取被试人口学信息
lapply(function(df) mutate(df,subj_idx = as.numeric(jsonlite::fromJSON(response[4])$subj_idx),
Born = jsonlite::fromJSON(response[5])$Born,
year = jsonlite::fromJSON(response[6])$sex,
education = jsonlite::fromJSON(response[7])$education)%>%
select(-success))%>%
bind_rows()
list.files(file.path("../Data"), pattern = "color_test_.*\\.csv$") %>%
# 对读取到的所有.out文件x都执行函数read.table
lapply(function(x) read.csv(file.path("../Data", x), header = TRUE)) %>%
# 读取被试人口学信息
lapply(function(df) mutate(df,subj_idx = as.numeric(jsonlite::fromJSON(response[4])$subj_idx),
Born = jsonlite::fromJSON(response[5])$Born,
year = jsonlite::fromJSON(response[6])$sex,
education = jsonlite::fromJSON(response[7])$education)%>%
select(-success))
list.files(file.path("../Data"), pattern = "color_test_.*\\.csv$") %>%
# 对读取到的所有.out文件x都执行函数read.table
lapply(function(x) read.csv(file.path("../Data", x), header = TRUE)) %>%
# 读取被试人口学信息
lapply(function(df) mutate(df,subj_idx = as.numeric(jsonlite::fromJSON(response[4])$subj_idx),
Born = jsonlite::fromJSON(response[5])$Born,
year = jsonlite::fromJSON(response[6])$sex,
education = jsonlite::fromJSON(response[7])$education)%>%
select(-success))%>%
bind_rows()
df_raw <- list.files(file.path("../Data"), pattern = "color_test_.*\\.csv$") %>%
# 对读取到的所有.out文件x都执行函数read.table
lapply(function(x) read.csv(file.path("../Data", x), header = TRUE)) %>%
# 读取被试人口学信息
lapply(function(df) mutate(df,subj_idx = as.numeric(jsonlite::fromJSON(response[4])$subj_idx),
Born = jsonlite::fromJSON(response[5])$Born,
year = jsonlite::fromJSON(response[6])$sex,
education = jsonlite::fromJSON(response[7])$education)%>%
select(-success,-timeout))%>%
bind_rows()
df_raw
View(df_raw)
df.target<-df_raw%>%
filter(type=='test1_target')%>%
mutate(subj_idx = as.factor(subj_idx),
rt=as.numeric(rt),
condition=as.factor(condition),
correct=as.factor(correct),
cue =as.factor(str_extract(cue, "(?<=color/).*?(?=\\.png)")),
target = as.numeric(str_extract(target, "(?<=color_).*?(?=\\.png)")))%>%
select(rt,
correct,
condition,
cue,
target)%>%
mutate(correct = ifelse(correct == "true", 1, 0),
condition = ifelse(condition == 1, 'congruent', 'incongruent'))
df.rec<-df_raw%>%
filter(type=='test1_recon')%>%
mutate(image=as.numeric(img_angle),
range=as.numeric(uncertainty_half_range),
range_image=as.numeric(uncertainty_half_range_image))%>%
select(image,
range,
range_image)
df <- cbind(df.target, df.rec)%>%
filter(correct==1)%>%
mutate(error=target-image,
error=case_when(error>=180~180-(error-180),
error<=-180~-180-(error+180),
TRUE ~ error),
abs_error = abs(error))
ggplot(df,
aes(x=rt,
color=condition,
))+
geom_histogram(aes(y = ..density..,
fill=condition),
position = "identity",
alpha=0.5) +
geom_density() +
labs(x = "rt", y = "Density") +
theme_minimal()
ggplot(df,
aes(x=error,
color=condition))+
geom_histogram(aes(y = ..density..,
fill=condition),
position = "identity",
alpha=0.5,
bins=15) +
geom_density() +
labs(x = "error", y = "Density") +
theme_minimal()
ggplot(df,
aes(x=range_image,
color=condition))+
geom_histogram(aes(y = ..density..,
fill=condition),
position = "identity",
alpha=0.5,
bins=15) +
geom_density() +
labs(x = "error", y = "Density") +
theme_minimal()
bruceR::Corr(df)
df.target<-df_raw%>%
filter(type=='test1_target')%>%
mutate(subj_idx = as.factor(subj_idx),
rt=as.numeric(rt),
condition=as.factor(condition),
correct=as.factor(correct),
cue =as.factor(str_extract(cue, "(?<=color/).*?(?=\\.png)")),
target = as.numeric(str_extract(target, "(?<=color_).*?(?=\\.png)")))%>%
select(rt,
correct,
condition,
cue,
target)%>%
mutate(correct = ifelse(correct == "true", 1, 0),
condition = ifelse(condition == 1, 'congruent', 'incongruent'))
df.rec<-df_raw%>%
filter(type=='test1_recon')%>%
mutate(image=as.numeric(img_angle),
range=as.numeric(uncertainty_half_range),
range_image=as.numeric(uncertainty_half_range_image))%>%
select(image,
range,
range_image)
df <- cbind(df.target, df.rec)%>%
filter(correct==1)%>%
mutate(error=target-image,
error=case_when(error>=180~180-(error-180),
error<=-180~-180-(error+180),
TRUE ~ error),
abs_error = abs(error))
View(df)
View(df_raw)
cbind(df.target, df.rec)
cbind(df.target, df.rec)%>%
filter(correct==1)
df <- cbind(df.target, df.rec)
View(df)
View(df_raw)
df.target<-df_raw%>%
filter(type=='test1_target')%>%
mutate(subj_idx = as.factor(subj_idx),
rt=as.numeric(rt),
condition=as.factor(condition),
correct=as.factor(correct),
cue =as.factor(str_extract(cue, "(?<=color/).*?(?=\\.png)")),
target = as.numeric(str_extract(target, "(?<=color_).*?(?=\\.png)")))%>%
select(rt,
correct,
condition,
cue,
target)%>%
mutate(correct = case_when(correct=='true'~1,
correct=='TRUE'~1,
TRUE ~ 0),,
condition = ifelse(condition == 1, 'congruent', 'incongruent'))
df.rec<-df_raw%>%
filter(type=='test1_recon')%>%
mutate(image=as.numeric(img_angle),
range=as.numeric(uncertainty_half_range),
range_image=as.numeric(uncertainty_half_range_image))%>%
select(image,
range,
range_image)
df <- cbind(df.target, df.rec)%>%
filter(correct==1)%>%
mutate(error=target-image,
error=case_when(error>=180~180-(error-180),
error<=-180~-180-(error+180),
TRUE ~ error),
abs_error = abs(error))
ggplot(df,
aes(x=rt,
color=condition,
))+
geom_histogram(aes(y = ..density..,
fill=condition),
position = "identity",
alpha=0.5) +
geom_density() +
labs(x = "rt", y = "Density") +
theme_minimal()
ggplot(df,
aes(x=error,
color=condition))+
geom_histogram(aes(y = ..density..,
fill=condition),
position = "identity",
alpha=0.5,
bins=15) +
geom_density() +
labs(x = "error", y = "Density") +
theme_minimal()
ggplot(df,
aes(x=range_image,
color=condition))+
geom_histogram(aes(y = ..density..,
fill=condition),
position = "identity",
alpha=0.5,
bins=15) +
geom_density() +
labs(x = "error", y = "Density") +
theme_minimal()
ggplot(df,
aes(x=range_image,
color=condition))+
geom_histogram(aes(y = ..density..,
fill=condition),
position = "identity",
alpha=0.5,
bins=15) +
geom_density() +
labs(x = "error", y = "Density") +
theme_minimal()
bruceR::Corr(df)
ggplot(df,
aes(x=range_image,
y=abs_error))+
geom_point()+
theme_minimal()
library(pacman)
p_load('tidyverse','bruceR')
df_raw <- list.files(file.path("../Data"), pattern = "test_.*\\.csv$") %>%
# 对读取到的所有.out文件x都执行函数read.table
lapply(function(x) read.csv(file.path("../Data", x), header = TRUE)) %>%
# 读取被试人口学信息
lapply(function(df) mutate(df,subj_idx = as.numeric(jsonlite::fromJSON(response[4])$subj_idx),
Born = jsonlite::fromJSON(response[5])$Born,
year = jsonlite::fromJSON(response[6])$sex,
education = jsonlite::fromJSON(response[7])$education)%>%
select(-success,-timeout))%>%
bind_rows()
df.target<-df_raw%>%
filter(type=='test1_target')%>%
mutate(subj_idx = as.factor(subj_idx),
rt=as.numeric(rt),
condition=as.factor(condition),
correct=as.factor(correct),
cue =as.factor(str_extract(cue, "(?<=color/).*?(?=\\.png)")),
target = as.numeric(str_extract(target, "(?<=color_).*?(?=\\.png)")))%>%
select(rt,
correct,
condition,
cue,
target)%>%
mutate(correct = case_when(correct=='true'~1,
correct=='TRUE'~1,
TRUE ~ 0),,
condition = ifelse(condition == 1, 'congruent', 'incongruent'))
df.rec<-df_raw%>%
filter(type=='test1_recon')%>%
mutate(image=as.numeric(img_angle),
range=as.numeric(uncertainty_half_range),
range_image=as.numeric(uncertainty_half_range_image))%>%
select(image,
range,
range_image)
df <- cbind(df.target, df.rec)%>%
filter(correct==1)%>%
mutate(error=target-image,
error=case_when(error>=180~180-(error-180),
error<=-180~-180-(error+180),
TRUE ~ error),
abs_error = abs(error))
ggplot(df,
aes(x=rt,
color=condition,
))+
geom_histogram(aes(y = ..density..,
fill=condition),
position = "identity",
alpha=0.5) +
geom_density() +
labs(x = "rt", y = "Density") +
theme_minimal()
ggplot(df,
aes(x=error,
color=condition))+
geom_histogram(aes(y = ..density..,
fill=condition),
position = "identity",
alpha=0.5,
bins=15) +
geom_density() +
labs(x = "error", y = "Density") +
theme_minimal()
ggplot(df,
aes(x=range_image,
color=condition))+
geom_histogram(aes(y = ..density..,
fill=condition),
position = "identity",
alpha=0.5,
bins=15) +
geom_density() +
labs(x = "error", y = "Density") +
theme_minimal()
df
ggplot(df,
aes(x=range_image,
color=condition))+
geom_histogram(aes(y = ..density..,
fill=condition),
position = "identity",
alpha=0.5,
bins=15) +
geom_density() +
labs(x = "error", y = "Density") +
theme_minimal()
bruceR::Corr(df)
ggplot(df,
aes(x=range_image,
y=abs_error))+
geom_point()+
theme_minimal()
df.target<-read.csv('../Data/color_test_2.csv')%>%
filter(type=='test1_target')%>%
mutate(rt=as.numeric(rt),
condition=as.factor(condition),
correct=as.factor(correct),
cue =as.factor(str_extract(cue, "(?<=color/).*?(?=\\.png)")),
target = as.numeric(str_extract(target, "(?<=color_).*?(?=\\.png)")))%>%
select(rt,
correct,
condition,
cue,
target)%>%
mutate(correct = ifelse(correct == "true", 1, 0),
condition = ifelse(condition == 1, 'congruent', 'incongruent'))
df.rec<-read.csv('../Data/color_test_2.csv')%>%
filter(type=='test1_recon')%>%
mutate(image=as.numeric(img_angle),
range=as.numeric(uncertainty_half_range),
range_image=as.numeric(uncertainty_half_range_image))%>%
select(image,
range,
range_image)
df <- cbind(df.target, df.rec)%>%
filter(correct==1)%>%
mutate(error=target-image,
error=case_when(error>=180~180-(error-180),
error<=-180~-180-(error+180),
TRUE ~ error),
abs_error = abs(error))
df.target<-df_raw%>%
filter(grepl("^test[1-5]_target$", type))%>%
mutate(subj_idx = as.factor(subj_idx),
rt=as.numeric(rt),
condition=as.factor(condition),
correct=as.factor(correct),
cue =as.factor(str_extract(cue, "(?<=color/).*?(?=\\.png)")),
target = as.numeric(str_extract(target, "(?<=color_).*?(?=\\.png)")))%>%
select(rt,
correct,
condition,
cue,
target)%>%
mutate(correct = case_when(correct=='true'~1,
correct=='TRUE'~1,
TRUE ~ 0),,
condition = ifelse(condition == 1, 'congruent', 'incongruent'))
df.rec<-df_raw%>%
filter(type=='test1_recon')%>%
mutate(image=as.numeric(img_angle),
range=as.numeric(uncertainty_half_range),
range_image=as.numeric(uncertainty_half_range_image))%>%
select(image,
range,
range_image)
df <- cbind(df.target, df.rec)%>%
filter(correct==1)%>%
mutate(error=target-image,
error=case_when(error>=180~180-(error-180),
error<=-180~-180-(error+180),
TRUE ~ error),
abs_error = abs(error))
df_raw <- list.files(file.path("../Data"), pattern = "test_.*\\.csv$") %>%
# 对读取到的所有.out文件x都执行函数read.table
lapply(function(x) read.csv(file.path("../Data", x), header = TRUE)) %>%
# 读取被试人口学信息
lapply(function(df) mutate(df,subj_idx = as.numeric(jsonlite::fromJSON(response[4])$subj_idx),
Born = jsonlite::fromJSON(response[5])$Born,
year = jsonlite::fromJSON(response[6])$sex,
education = jsonlite::fromJSON(response[7])$education)%>%
select(-success,-timeout))%>%
bind_rows()
df.target<-df_raw%>%
filter(grepl("^test[1-5]_target$", type))%>%
mutate(subj_idx = as.factor(subj_idx),
rt=as.numeric(rt),
condition=as.factor(condition),
correct=as.factor(correct),
cue =as.factor(str_extract(cue, "(?<=color/).*?(?=\\.png)")),
target = as.numeric(str_extract(target, "(?<=color_).*?(?=\\.png)")))%>%
select(rt,
correct,
condition,
cue,
target)%>%
mutate(correct = case_when(correct=='true'~1,
correct=='TRUE'~1,
TRUE ~ 0),,
condition = ifelse(condition == 1, 'congruent', 'incongruent'))
df.rec<-df_raw%>%
filter(type=='test1_recon')%>%
mutate(image=as.numeric(img_angle),
range=as.numeric(uncertainty_half_range),
range_image=as.numeric(uncertainty_half_range_image))%>%
select(image,
range,
range_image)
df <- cbind(df.target, df.rec)%>%
filter(correct==1)%>%
mutate(error=target-image,
error=case_when(error>=180~180-(error-180),
error<=-180~-180-(error+180),
TRUE ~ error),
abs_error = abs(error))
df.target<-df_raw%>%
filter(grepl("^test[1-5]_target$", type))%>%
mutate(subj_idx = as.factor(subj_idx),
rt=as.numeric(rt),
condition=as.factor(condition),
correct=as.factor(correct),
cue =as.factor(str_extract(cue, "(?<=color/).*?(?=\\.png)")),
target = as.numeric(str_extract(target, "(?<=color_).*?(?=\\.png)")))%>%
select(rt,
correct,
condition,
cue,
target)%>%
mutate(correct = case_when(correct=='true'~1,
correct=='TRUE'~1,
TRUE ~ 0),,
condition = ifelse(condition == 1, 'congruent', 'incongruent'))
df.rec<-df_raw%>%
filter(grepl("^test[1-5]_recon$", type))%>%
mutate(image=as.numeric(img_angle),
range=as.numeric(uncertainty_half_range),
range_image=as.numeric(uncertainty_half_range_image))%>%
select(image,
range,
range_image)
df <- cbind(df.target, df.rec)%>%
filter(correct==1)%>%
mutate(error=target-image,
error=case_when(error>=180~180-(error-180),
error<=-180~-180-(error+180),
TRUE ~ error),
abs_error = abs(error))
View(df)
ggplot(df,
aes(x=rt,
color=condition,
))+
geom_histogram(aes(y = ..density..,
fill=condition),
position = "identity",
alpha=0.5) +
geom_density() +
labs(x = "rt", y = "Density") +
theme_minimal()
ggplot(df,
aes(x=error,
color=condition))+
geom_histogram(aes(y = ..density..,
fill=condition),
position = "identity",
alpha=0.5,
bins=15) +
geom_density() +
labs(x = "error", y = "Density") +
theme_minimal()
ggplot(df,
aes(x=range_image,
color=condition))+
geom_histogram(aes(y = ..density..,
fill=condition),
position = "identity",
alpha=0.5,
bins=15) +
geom_density() +
labs(x = "error", y = "Density") +
theme_minimal()
bruceR::Corr(df)
